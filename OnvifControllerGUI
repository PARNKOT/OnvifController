import threading
import time
import tkinter as tk
from tkinter import ttk

from rtsp import RtspStreamer, ImageSettings
from OnvifAbsoluteMoveController import OnvifAbsoluteMoveController
from utils import read_settings


class GuiOptions:
    app_width = 1200
    app_height = 600


class OnvifCamera(tk.Tk):
    def __init__(self, ip, port, login, password):
        super().__init__()

        self.ip = ip
        self.port = port
        self.login = login
        self.password = password
        self.rtsp_uri = f"rtsp://{login}:{password}@{ip}/Streaming/Channels/101"

        # App settings
        self.maxsize(width=GuiOptions.app_width, height=GuiOptions.app_height)
        self.title("Onvif Controller")
        self.geometry(f"{GuiOptions.app_width}x{GuiOptions.app_height}")
        self.wm_protocol("WM_DELETE_WINDOW", self.on_close)

        # threads
        self.video_read_event = None
        self.rtsp_streamer = None
        self.video_capture_thread = None

        # widgets
        self.frame_control: ttk.Frame
        self.frame_video_stream: ttk.Frame
        self.separator1: ttk.Separator
        self.panel: tk.Label

        # styles
        ttk.Style().theme_use("default")
        ttk.Style().configure('Control.TFrame', background='green')
        ttk.Style().configure('Video.TFrame', background='#f5f5f5')  # '#f5f5f5'
        ttk.Style().configure('Sep.TSeparator', background='black')

        # init widgets and threads
        self.__init_widgets()
        self.__pack_widgets()
        self.__init_threads()

    def __init_widgets(self):
        self.frame_control = ttk.Frame(self, padding=10, style="Control.TFrame",
                                       **self.calculate_frame_control_geometry())
        self.frame_control.propagate(False)

        self.frame_video_stream = ttk.Frame(self, padding=10, style="Video.TFrame",
                                            **self.calculate_frame_video_stream_geometry())
        self.frame_video_stream.propagate(False)

        self.separator1 = ttk.Separator(self, orient=tk.VERTICAL, style="Sep.TSeparator")

        self.panel = tk.Label(self.frame_video_stream)

    def __init_threads(self):
        self.video_read_event = threading.Event()
        self.video_read_event.set()

        self.rtsp_streamer = RtspStreamer(self.rtsp_uri, scale=0.5)
        self.rtsp_streamer.start()

        self.video_capture_thread = threading.Thread(target=self.display_video, name="Image display")
        self.video_capture_thread.start()

    def __pack_widgets(self):
        self.frame_control.pack(side=tk.LEFT, anchor=tk.NW)
        self.separator1.pack(side=tk.LEFT, fill=tk.BOTH)
        self.frame_video_stream.pack(side=tk.LEFT)
        self.panel.pack(anchor=tk.W)

    @staticmethod
    def calculate_frame_control_geometry():
        return {"width": GuiOptions.app_width * 0.20, "height": GuiOptions.app_height*0.3}

    @staticmethod
    def calculate_frame_video_stream_geometry():
        return {"width": GuiOptions.app_width * 0.80, "height": GuiOptions.app_height}

    def display_video(self):
        while self.video_read_event.is_set():
            try:
                image = self.rtsp_streamer.get_as_tkinter_image()
                self.panel.configure(image=image)
                self.panel.image = image
            except:
                print("Couldn't display image")

    def run(self):
        self.mainloop()

    def on_close(self):
        self.video_read_event.clear()
        self.rtsp_streamer.stop()
        print("Quit")
        self.quit()


if __name__ == "__main__":
    settings = read_settings("security.txt")

    ip = settings["ip"]
    port = settings["port"]
    login = settings["login"]
    password = settings["password"]

    onvif_controller = OnvifAbsoluteMoveController()
    onvif_controller.connect(ip, port, login, password)
    app = OnvifCamera(ip, port, login, password)
    app.run()

