import threading
import time
import tkinter as tk
from tkinter import ttk
from PIL import ImageTk, Image

from rtsp import RtspStreamer
from OnvifAbsoluteMoveController import OnvifAbsoluteMoveController


class GuiOptions:
    app_width = 1080
    app_height = 720


IP = "10.1.1.14"  # Camera IP address
PORT = 80  # Port
USER = "admin"  # Username
PASSWORD = "Pa$$w0rd"  # Password
URI = f"rtsp://{USER}:{PASSWORD}@{IP}/Streaming/Channels/101"


class App(tk.Tk):
    def __init__(self):
        super().__init__()

        self.image = None

        self.maxsize(width=GuiOptions.app_width, height=GuiOptions.app_height)

        ttk.Style().theme_use("default")
        ttk.Style().configure('Control.TFrame', background='green')
        ttk.Style().configure('Video.TFrame', background='red')  # #f5f5f5
        ttk.Style().configure('Sep.TSeparator', background='black')

        self.title("Onvif Controller")
        self.geometry(f"{GuiOptions.app_width}x{GuiOptions.app_height}")
        #self.resizable()

        self.frame_control = ttk.Frame(self, padding=10,style="Control.TFrame",
                                       **self.calculate_frame_control_geometry())
        self.frame_control.propagate(False)

        self.frame_video_stream = ttk.Frame(self, padding=10, style="Video.TFrame",
                                            **self.calculate_frame_video_stream_geometry())
        self.frame_video_stream.propagate(False)

        self.separator1 = ttk.Separator(self, orient=tk.VERTICAL, style="Sep.TSeparator")

        self.frame_control.pack(side=tk.LEFT)
        self.separator1.pack(side=tk.LEFT, fill=tk.BOTH)
        self.frame_video_stream.pack(side=tk.LEFT)

        self.panel = tk.Label(self.frame_video_stream)#, height=300, width=400)
        self.panel.pack()

        #self.canvas = tk.Canvas(self.frame_video_stream, **self.calculate_frame_video_stream_geometry())
        #.canvas.pack()
        #self.canvas.create_image(image=rtsp_streamer.get_image())

    def calculate_frame_control_geometry(self):
        return {"width": GuiOptions.app_width * 0.20, "height": GuiOptions.app_height*0.3}

    def calculate_frame_video_stream_geometry(self):
        return {"width": GuiOptions.app_width * 0.80, "height": GuiOptions.app_height}

    def display_video(self):
        while True:
            try:
                self.image = rtsp_streamer.get_as_tkinter_image()
                self.panel.configure(image=self.image)
            except:
                print("Couldn't display image")

    def run(self):
        threading.Thread(target=self.display_video, name="Image display").start()
        self.mainloop()


if __name__ == "__main__":
'''
    rtsp_streamer = RtspStreamer(URI, scale=0.5)
    rtsp_streamer.start()
    time.sleep(2)
    img = rtsp_streamer.get_image()
    print(img)

    # Rearrang the color channel
    #b, g, r = cv2.split(img)
    #img = cv2.merge((r, g, b))

    # A root window for displaying objects
    root = tk.Tk()

    # Convert the Image object into a TkPhoto object
    im = Image.fromarray(img)
    imgtk = ImageTk.PhotoImage(image=im)

    # Put it in the display window
    tk.Label(root, image=imgtk).pack()
    
    root.mainloop()  # Start the GUI
'''

    rtsp_streamer = RtspStreamer(URI, scale=0.5)
    onvif_controller = OnvifAbsoluteMoveController()
    onvif_controller.connect(IP, PORT, USER, PASSWORD)
    app = App()

    rtsp_streamer.start()
    app.run()

    rtsp_streamer.stop()

